from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
import os

try:
    from openai import OpenAI
except Exception:
    OpenAI = None

router = APIRouter()

class Message(BaseModel):
    role: str
    content: str

class ChatIn(BaseModel):
    messages: List[Message]

class ChatOut(BaseModel):
    reply: str
    summary: str

SYSTEM_PROMPT_BG = (
    "–¢–∏ —Å–∏ LUNA ‚Äî –µ–º–ø–∞—Ç–∏—á–µ–Ω HR –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ–≤–æ—Ä–∏—à –∫—Ä–∞—Ç–∫–æ, –ø—Ä–∏—è—Ç–µ–ª—Å–∫–∏ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ. "
    "–ê–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ä—Ç —Å–ø–æ–¥–µ–ª—è –ª–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏, –Ω–µ –≥–∏ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–π, –∞ —Å–∞–º–æ –æ–±–æ–±—â–∏ —É–º–µ–Ω–∏—è –∏ –æ–ø–∏—Ç. "
    "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫–æ–≥–∞—Ç–æ –≤—Ö–æ–¥—ä—Ç –µ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∏–Ω–∞—á–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏."
)

INSTRUCTION = (
    "–í—ä—Ä–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç –≤ —Å–ª–µ–¥–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –¥—Ä—É–≥–∏ —Å–∏–º–≤–æ–ª–∏):\n"
    "REPLY: <–∫—Ä–∞—Ç—ä–∫ –ø—Ä–∏—è—Ç–µ–ª—Å–∫–∏ –æ—Ç–≥–æ–≤–æ—Ä –∫—ä–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞>\n"
    "SUMMARY: <–µ–¥–Ω–æ –∏–∑—Ä–µ—á–µ–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–∏–µ –∑–∞ HR>"
)

def _parse_model_output(text: str):
    reply, summary = "", ""
    for line in text.splitlines():
        if line.strip().startswith("REPLY:"):
            reply = line.split("REPLY:",1)[1].strip()
        elif line.strip().startswith("SUMMARY:"):
            summary = line.split("SUMMARY:",1)[1].strip()
    if not reply:
        reply = text.strip()
    if not summary:
        summary = "–ö—Ä–∞—Ç–∫–æ –æ–±–æ–±—â–µ–Ω–∏–µ –Ω–µ –µ –æ—Ç–∫—Ä–∏—Ç–æ."
    return reply, summary

@router.post("/luna/chat", response_model=ChatOut)
def luna_chat(data: ChatIn):
    api_key = os.environ.get("OPENAI_API_KEY", "").strip()
    if OpenAI is None or not api_key:
        latest_user = ""
        for m in reversed(data.messages):
            if m.role == "user":
                latest_user = m.content
                break
        reply = "–ó–¥—Ä–∞–≤–µ–π! –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∏ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞. –†–∞–∑–±–∏—Ä–∞–º —Å–ª–µ–¥–Ω–æ—Ç–æ: " + (latest_user[:200] + ("..." if len(latest_user) > 200 else "")) + " üòä"
        summary = "–î–µ–º–æ —Ä–µ–∂–∏–º: –∏–∑–≤–ª–µ—á–µ–Ω –µ —Ç–µ–∫—Å—Ç –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."
        return {"reply": reply, "summary": summary}

    try:
        client = OpenAI(api_key=api_key)
        msgs = [{"role":"system","content":SYSTEM_PROMPT_BG}]
        for m in data.messages:
            role = "user" if m.role not in ("user","assistant") else m.role
            msgs.append({"role": role, "content": m.content})
        msgs.append({"role":"system","content":INSTRUCTION})

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=msgs,
            temperature=0.3,
            max_tokens=300
        )
        text = resp.choices[0].message.content or ""
        reply, summary = _parse_model_output(text)
        return {"reply": reply, "summary": summary}
    except Exception as e:
        latest_user = ""
        for m in reversed(data.messages):
            if m.role == "user":
                latest_user = m.content
                break
        reply = "–ó–¥—Ä–∞–≤–µ–π! –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∏ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞. –ï—Ç–æ –∫—Ä–∞—Ç—ä–∫ –ø—Ä–æ—á–∏—Ç: " + (latest_user[:200] + ("..." if len(latest_user) > 200 else "")) + " üòä"
        summary = "–í—Ä–µ–º–µ–Ω–µ–Ω fallback (–Ω–µ—É—Å–ø–µ—à–µ–Ω AI –ø–æ–≤–∏–∫)."
        return {"reply": reply, "summary": summary}
